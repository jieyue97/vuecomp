{
  "author" : "jihongxiao",
  "version" : "1.2.6",
  "userSecure" : "",
  "currTypeMapperGroupName" : "gd",
  "currTemplateGroupName" : "gd",
  "currColumnConfigGroupName" : "gd",
  "currGlobalConfigGroupName" : "gd",
  "typeMapper" : {
    "gd" : {
      "name" : "gd",
      "elementList" : [ {
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "text",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "decimal(\\(\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "columnType" : "clob(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "number(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "columnType" : "nvarchar2(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "date",
        "javaType" : "java.util.Date"
      }, {
        "columnType" : "numeric(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "columnType" : "bpchar",
        "javaType" : "java.lang.String"
      }, {
        "columnType" : "float8",
        "javaType" : "java.lang.Double"
      }, {
        "columnType" : "money",
        "javaType" : "java.lang.Double"
      }, {
        "columnType" : "float4",
        "javaType" : "java.lang.Float"
      }, {
        "columnType" : "int2",
        "javaType" : "java.lang.Integer"
      }, {
        "columnType" : "bit",
        "javaType" : "java.lang.Boolean"
      }, {
        "columnType" : "bool",
        "javaType" : "java.lang.Boolean"
      }, {
        "columnType" : "numeric(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "columnType" : "timestamp(\\(\\d+\\))?",
        "javaType" : "java.util.Date"
      }, {
        "columnType" : "smallint",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "int2",
        "javaType" : "java.lang.Integer"
      } ]
    }
  },
  "template" : {
    "gd" : {
      "name" : "gd",
      "elementList" : [ {
        "name" : "entity.java.vm",
        "code" : "##导入宏定义\n$!init\n$define\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableName;\n#if($isDict)import com.baomidou.mybatisplus.annotation.TableField;#end\n#if($isInheritBaseEntity)import com.guodi.core.mp.base.CoreEntity;#end\n\nimport io.swagger.annotations.*;\nimport lombok.*;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport org.springframework.format.annotation.DateTimeFormat;\n#if(!$isInheritBaseEntity)import java.io.Serializable;#end\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\n@TableName(\"$!{tableInfo.obj.name.toUpperCase()}\")\n#if($isInheritBaseEntity)@EqualsAndHashCode(callSuper = true)\n#end\n@ApiModel(value = \"$!{tableInfo.name}对象\", description = \"$!{tableInfo.name}对象\")\npublic class $!{tableInfo.name}#if($isInheritBaseEntity) extends CoreEntity#else implements Serializable#end {\n    #if(!$isInheritBaseEntity)private static final long serialVersionUID = 1L; #end\n#foreach($column in $tableInfo.fullColumn)\n    \n    #if($!{column.comment})/**\n    * #cutStr(${column.comment})\n    \n    */\n    @TableField(\"$!{column.obj.name.toUpperCase()}\")\n    #end\n#if($tool.newHashSet(\"java.util.Date\").contains($column.type))\n@DateTimeFormat(\n        pattern = \"yyyy-MM-dd\"\n    )\n    @JsonFormat(\n        pattern = \"yyyy-MM-dd\"\n    )\n    #end#if($!{column.comment})@ApiModelProperty(value = \"#cutStr(${column.comment})\")#end\n    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n## ----------  生成常量  ----------\n#foreach($column in $tableInfo.fullColumn)#if($!{column.comment} && $!{column.ext.dic})\n    \n    /**\n     * $!{column.name}名称\n     */\n    @ApiModelProperty(value = \"$!{column.name}名称\")\n    @TableField(exist = false)\n    public String $!{column.name}Text;\n#end#end\n\n}"
      }, {
        "name" : "dao.java.vm",
        "code" : "##引入init初始化\n$!init\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\n\n/**\n * @描述 $!{tableInfo.comment}$!{tableInfo.name}数据库访问层\n * @作者 $!author\n * @日期 $!time.currTime(\"yyyy-MM-dd HH:mm\")\n */\npublic interface $!{tableName} extends BaseMapper<$!{tableInfo.name}> {\n\n\n}"
      }, {
        "name" : "service.java.vm",
        "code" : "##引入init初始化\n$!init\n##定义初始变量\n#set($tableName = $tool.append(\"I\", $tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\n#if(!$isInheritBaseEntity)import com.baomidou.mybatisplus.extension.service.IService;#end\n#if($isInheritBaseEntity)import com.guodi.core.mp.base.BaseService;#end\n\n/**\n * @描述 $!{tableInfo.comment}$!{tableInfo.name}服务接口\n * @作者 $!author\n * @日期 $!time.currTime(\"yyyy-MM-dd HH:mm\")\n */\npublic interface $!{tableName} extends#if($isInheritBaseEntity) BaseService<$!{tableInfo.name}>#else IService<$!{tableInfo.name}>#end {\n    \n\n}"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##引入init初始化\n$!init\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.service.I$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n#if($isInheritBaseEntity)import com.guodi.core.mp.base.BaseServiceImpl;#end\n#if(!$isInheritBaseEntity)import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;#end\nimport javax.annotation.Resource;\n\n/**\n * @描述 $!{tableInfo.comment}$!{tableInfo.name}服务实现类\n * @作者 $!author\n * @日期 $!time.currTime(\"yyyy-MM-dd HH:mm\")\n */\n@Service\npublic class $!{tableName} extends#if($isInheritBaseEntity) BaseServiceImpl#else ServiceImpl#end<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements I$!{tableInfo.name}Service {\n    \n    @Resource\n    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;\n\n    \n}"
      }, {
        "name" : "controller.java.vm",
        "code" : "##引入init初始化\n$!init\n$!convertDictToText\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n#set($serviceName = $tool.append(\"I\", $tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.I$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\nimport com.guodi.core.boot.ctrl.BaseController;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport com.guodi.core.log.annotation.ApiLog;\nimport com.guodi.core.mp.support.*;\nimport com.guodi.core.tool.api.R;\nimport com.guodi.core.tool.utils.Func;\nimport com.guodi.core.tool.utils.StringUtil;\nimport io.swagger.annotations.*;\nimport springfox.documentation.annotations.*;\n#if($isDict)import com.guodi.system.cleanapi.IRedisDictCleanClient;\nimport java.util.HashMap;#end\n\nimport javax.annotation.Resource;\nimport java.util.Map;\nimport java.util.List;\n\n\n/**\n * @描述 $!{tableInfo.comment}$!{tableInfo.name}控制层\n * @作者 $!author\n * @日期 $!time.currTime(\"yyyy-MM-dd HH:mm\")\n */\n@RestController\n@RequestMapping(\"/$tableInfo.name\")\n@Api(value = \"$!{tableInfo.comment}$!{tableInfo.name}\", tags = \"$!{tableInfo.comment}$!{tableInfo.name}\")\npublic class $!{tableName} extends BaseController {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{serviceName} $!tool.firstLowerCase($tableInfo.name)Service;\n\n#if($isDict)\n    @Resource\n    private IRedisDictCleanClient redisDictService;\n#end\n    /**\n     * @描述 根据ID查询\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @GetMapping(\"/getById\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"id\", value = \"主键\", paramType = \"query\",required = true, dataType = \"$!{pk.shortType}\"),\n    })\n    @ApiOperationSupport(order = 1)\n    @ApiOperation(value = \"根据ID查询对象\", notes = \"传入id\")\n    public R<$!{tableInfo.name}> getById($!pk.shortType id) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} = this.$!{tool.firstLowerCase($tableInfo.name)}Service.getById(id);\n        #if($isDict)#toEntityList()#end\n        \n        return R.data($!{tool.firstLowerCase($tableInfo.name)});\n    }\n\n    /**\n     * @描述 根据ID批量查询\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @PostMapping(\"/listByIds\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"ids\", value = \"主键,多个逗号分隔\",required = true, paramType = \"query\", dataType = \"java.lang.String\"),\n    })\n    @ApiOperationSupport(order = 2)\n    @ApiOperation(value = \"批量根据ID查询对象\", notes = \"传入ids\")\n    public R<List<$!{tableInfo.name}>> listByIds(@ApiParam(value = \"ids\", required = true) @RequestParam String ids) {\n        List<$!{tableInfo.name}> list = this.$!{tool.firstLowerCase($tableInfo.name)}Service.listByIds(Func.split(ids,','));\n        #if($isDict)#toEntityList(\"list\")#end\n        \n        return R.data(list);\n    }\n\n\n    /**\n     * @描述 动态条件分页查询\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @PostMapping(\"/page\")\n    @ApiOperationSupport(order = 3)\n    @ApiOperation(value = \"分页\", notes = \"传入map\")\n    public R<IPage<$!{tableInfo.name}>> page($!{tableInfo.name} $tool.firstLowerCase($!{tableInfo.name}), Query query) {\n        IPage<$!{tableInfo.name}> pages = this.$!{tool.firstLowerCase($tableInfo.name)}Service.page(Condition.getPage(query),Condition.getQueryWrapper($tool.firstLowerCase($!{tableInfo.name})));\n        #if($isDict)#toEntityList(\"page\")#end\n        \n        return R.data(pages);\n    }\n\n    /**\n     * @描述 新增或修改\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @PostMapping(\"/submit\")\n    @ApiOperationSupport(order = 6)\n    @ApiOperation(value = \"新增或修改\", notes = \"传入$tool.firstLowerCase($!{tableInfo.name})\")\n    public R<Boolean> submit(@RequestBody $!{tableInfo.name} $tool.firstLowerCase($!{tableInfo.name})) {\n        boolean flag = this.$!{tool.firstLowerCase($tableInfo.name)}Service.saveOrUpdate($tool.firstLowerCase($!{tableInfo.name}));\n        return R.status(flag);\n    }\n\n\n    /**\n     * @描述 新增\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @PostMapping(\"/save\")\n    @ApiOperationSupport(order = 7)\n    @ApiOperation(value = \"新增\", notes = \"传入$tool.firstLowerCase($!{tableInfo.name})\")\n    public R<Boolean> save(@RequestBody $!{tableInfo.name} $tool.firstLowerCase($!{tableInfo.name})) {\n        return R.status(this.$!{tool.firstLowerCase($tableInfo.name)}Service.save($tool.firstLowerCase($!{tableInfo.name})));\n    }\n\n\n    /**\n     * @描述 修改\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @PostMapping(\"/update\")\n    @ApiOperationSupport(order = 8)\n    @ApiOperation(value = \"修改\", notes = \"传入$tool.firstLowerCase($!{tableInfo.name})\")\n    public R<Boolean> update(@RequestBody $!{tableInfo.name} $tool.firstLowerCase($!{tableInfo.name})) {\n        return R.status(this.$!{tool.firstLowerCase($tableInfo.name)}Service.updateById($tool.firstLowerCase($!{tableInfo.name})));\n    }\n\n\n    /**\n     * @描述 批量删除\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @PostMapping(\"/removeByIds\")\n    @ApiOperationSupport(order = 9)\n    @ApiOperation(value = \"批量删除\", notes = \"传入ids\")\n    @ApiImplicitParam(name = \"ids\", value = \"主键,多个逗号分隔\", paramType = \"query\",required = true, dataType = \"string\")\n    public R<Boolean> removeByIds(@ApiParam(value = \"主键集合\", required = true) @RequestParam String ids) {\n        if(StringUtil.isBlank(ids)){\n            return R.fail(\"请先选择删除的数据!\");\n        }\n#if($isInheritBaseEntity)\n        return R.status(this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteLogic(Func.toLongList(ids)));\n#else\n        return R.status(this.$!{tool.firstLowerCase($tableInfo.name)}Service.removeByIds(Func.toLongList(ids)));        \n#end\n    }\n\n    /**\n     * @描述 删除\n     * @作者 $!author\n     * @日期 $!time.currTime()\n     **/\n    @GetMapping(\"/deleteById\")\n    @ApiOperationSupport(order = 10)\n    @ApiOperation(value = \"删除\", notes = \"传入id\")\n    @ApiImplicitParam(name = \"id\", value = \"主键\", paramType = \"query\",required = true, dataType = \"$!pk.shortType\")\n    public R<Boolean> removeById(@ApiParam(value = \"主键\", required = true) @RequestParam $!pk.shortType id) {\n        if(StringUtil.isBlank(Func.toStr(id))){\n            return R.fail(\"请先选择删除的数据!\");\n        }\n        return R.status(this.$!{tool.firstLowerCase($tableInfo.name)}Service.removeById(id));\n    }\n    \n}"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入init初始化\n$!init\n##引入mybatis支持\n$!mybatisSupport\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n##$!callback.setSavePath($tool.append($modulePath, \"/mapper\")\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap id=\"BaseResultMap\" type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\">\n        <!--@Table $!{tableInfo.originTableName}-->\n#if($isInheritBaseEntity)\n        <result property=\"id\" column=\"id\" jdbcType=\"BIGINT\"/>\n        <result property=\"createUser\" column=\"create_user\" jdbcType=\"BIGINT\"/>\n        <result property=\"createTime\" column=\"create_time\" jdbcType=\"TIMESTAMP\"/>\n        <result property=\"updateUser\" column=\"update_user\" jdbcType=\"BIGINT\"/>\n        <result property=\"updateTime\" column=\"update_time\" jdbcType=\"TIMESTAMP\"/>\n#end\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n    \n</mapper>\n"
      }, {
        "name" : "debug.json.vm",
        "code" : "//调试表原始对象\n##$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n##$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n#foreach($column in $tableInfo.fullColumn)\n    #if($!{column.comment} && $!column.comment.indexOf(\"{\") != -1 && $!column.comment.indexOf(\"}\") != -1)\n        #set($startIndex = $!column.comment.indexOf(\"{\"))\n        #set($endIndex = $!column.comment.indexOf(\"}\") + 1)\n        #set($object_str = $!column.comment.substring($startIndex,$endIndex))\n        #if($!{object_str.length()} > 0 && $!{object_str} != \"{}\")\n            #set($json = $tool.parseJson($object_str))\n            #if($json.get(\"typeCode\"))\n                $tool.call($column.ext.put(\"dic\", $json.get(\"typeCode\")))\n            #end\n            #if($json.get(\"isShow\"))\n                $tool.call($column.ext.put(\"isShow\", $json.get(\"isShow\")))\n            #end\n            #if($json.get(\"isSearch\"))\n                $tool.call($column.ext.put(\"isSearch\", $json.get(\"isSearch\")))\n            #end\n        #end\n    #end\n#end\n\n//调试列原始列类型\n##$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\n##sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\n##sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"
      }, {
        "name" : "template.vue.vm",
        "code" : "##引入宏定义\n$!init\n$define\n#save(\"/vue\", \".vue\")\n\n<template>\n  <div class=\"info-body\">\n    <!-- 搜索条件 -->\n    <div class=\"info-search\">\n      <div class=\"left-search\">\n        <gd-customForm :setting=\"searchSetting\" :dictionary=\"dictionary\" ref=\"searchFormCustom\" v-model=\"searchForm\">\n          <template slot=\"footExtend\">\n            <el-col :span=\"3\">\n              <el-form-item style=\"float: right\">\n                <el-button @click=\"initData\" type=\"primary\" size=\"mini\"> 搜索 </el-button>\n              </el-form-item>\n            </el-col>\n          </template>\n        </gd-customForm>\n        <!-- params.name  由于是模板 所以搜索条件放在分页里面 -->\n        <!-- <el-input v-model=\"params.name\" placeholder=\"请输入\" style=\"width: 250px\" size=\"medium\"></el-input> -->\n      </div>\n      <div class=\"right-btn\">\n        <el-button type=\"primary\" size=\"mini\" plain @click=\"handleOptionDeal('add')\"> 新增</el-button>\n        <el-button type=\"danger\" size=\"mini\" plain @click=\"handleDelete\"> 删除</el-button>\n      </div>\n    </div>\n    <!-- 表格内容 -->\n    <div class=\"info-table\" v-loading=\"loading\">\n      <gd-table\n        :bottom-offset=\"80\"\n        ref=\"gdtable\"\n        :columns=\"tableColumn\"\n        :data=\"tableData\"\n        :total=\"total\"\n        :border=\"border\"\n        :page-params=\"params\"\n        :page-sizes=\"pageSizes\"\n        @selection-change=\"selectionChange\"\n        @pagination=\"setpagination\"\n      >\n        <!-- 针对表格的操作 按钮插槽 -->\n        <template slot=\"caozuo\" slot-scope=\"scope\">\n          <el-button type=\"text\" size=\"small\" @click.stop=\"handleOptionDeal('view', scope.row)\">查看 </el-button>\n          <el-button type=\"text\" size=\"small\" @click.stop=\"handleOptionDeal('edit', scope.row)\">编辑 </el-button>\n          <el-button type=\"text\" size=\"small\" @click.stop=\"rowDel(scope.row)\">删除 </el-button>\n        </template>\n      </gd-table>\n    </div>\n    <!-- 查看 新增 编辑的弹窗内容 -->\n    <gd-dialog :title=\"title\" draggable maximizable :closed.sync=\"showDialog\" :key=\"formKey\">\n      <div>\n        <gd-customForm :setting=\"setting\" ref=\"formCustom\" v-model=\"queryForm\" :key=\"formKey\" :dictionary=\"dictionary\" />\n      </div>\n      <template slot=\"footer\">\n        <div>\n          <el-button size=\"small\" type=\"primary\" v-show=\"type != 'view'\" @click=\"submitBtn\">保存</el-button>\n          <el-button size=\"small\" @click=\"showDialog = false\">取消</el-button>\n        </div>\n      </template>\n    </gd-dialog>\n  </div>\n</template>\n<script>\nimport { getList, remove, add } from './$tool.firstLowerCase($tableInfo.name)'\n//引入字典\nimport { entitiesOfOneType } from '@system/api/system/dict.js'\nexport default {\n  name: '$tool.firstLowerCase($tableInfo.name)',\n  data() {\n    return {\n      //自定义搜索条件\n      searchForm: {},\n      // 自定义搜索表单\n      searchSetting: [],\n      //自定义表单字典参数 需要手动获取然后取值\n      dictionary: {},\n      //form表单唯一key\n      formKey: '',\n      //表单设置传值 用于初始化\n      setting: [],\n      //表单信息 新增修改 查看  用于保存传参\n      queryForm: {},\n      //弹窗的头部信息\n      title: '',\n      //控制弹窗显示\n      showDialog: false,\n      //当前行数据\n      rows: {},\n      //控制新增 查看 编辑\n      type: 'search',\n      //数据多的时候需要loading效果 默认是开启\n      loading: false,\n      //表格是否需要边框\n      border: true,\n      //表头数据\n      tableColumn: [\n        // type 可选择  selection 多选框 index 序号\n        /**customType 自定义表单组件需要用到的类型\n         *  input 输入框\n         *  select 下拉框\n         *  date-picker 时间选择器  返回的格式是一个数组['2021-02-02','2022-02-03']\n         *  data-single 选择时间 返回字符串 \"2020-02-02\"\n         */\n        { type: 'selection' },\n#foreach($column in $tableInfo.fullColumn)\n        #showColumn($column)\n#end\n        #*{ prop: 'caseName', label: '实例名称', align: 'center', customType: 'input', isSearch: true },\n        { prop: 'caseCodeText', label: '实例编码', align: 'center', customType: 'select', dic: 'sex', isSearch: true },\n        { prop: 'caseView', label: '实例视图', align: 'center', customType: 'input', },\n        { prop: 'caseTypeText', label: '实例类型', align: 'center', customType: 'select', dic: 'org_category', isSearch: true },*#\n        { prop: 'caozuo', label: '操作', width: '140px', align: 'center' }\n      ],\n      //载入表格数据\n      // tableData: [{ \"id\": \"1430704066682408961\", \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\", \"roleName\": \"管理员\", \"deptName\": \"行政审批科\", \"postName\": \"\", \"sexText\": \"女\", \"userCode\": \"zhangwen\", \"account\": \"zhangwen\", \"userName\": \"张文\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"18163540892\", \"birthday\": \"\", \"sex\": 2, \"identityCard\": \"\", \"roleId\": \"1412957403934179330\", \"deptId\": \"1390923577376727042\", \"postId\": \"\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"0\", \"sort\": -1, \"createTime\": \"2021-08-26 09:30:05\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1430803611990880258\", \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\", \"roleName\": \"用户,管理员\", \"deptName\": \"行政审批科\", \"postName\": \"\", \"sexText\": \"无\", \"userCode\": \"zhangli\", \"account\": \"zhangli\", \"userName\": \"张丽\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"15685698547\", \"birthday\": \"\", \"sex\": -1, \"identityCard\": \"\", \"roleId\": \"1123598816738675202,1412957403934179330\", \"deptId\": \"1390923577376727042\", \"postId\": \"\", \"unitId\": \"1365226728219213825\", \"status\": 0, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"1\", \"sort\": -1, \"createTime\": \"2021-08-26 16:05:38\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1430808891800715266\", \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\", \"roleName\": \"超级管理员\", \"deptName\": \"行政审批科\", \"postName\": \"首席执行官\", \"sexText\": \"\", \"userCode\": \"YDZ0O75I0OBE\", \"account\": \"admin_test\", \"userName\": \"mou\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"15818403649\", \"birthday\": \"\", \"sex\": -1, \"identityCard\": \"\", \"roleId\": \"1123598816738675201\", \"deptId\": \"1390923577376727042\", \"postId\": \"1123598817738675201\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"1\", \"sort\": -1, \"createTime\": \"2021-08-26 16:26:37\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1430809064239153154\", \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\", \"roleName\": \"用户\", \"deptName\": \"行政审批科\", \"postName\": \"普通员工\", \"sexText\": \"男\", \"userCode\": \"123zxvcbnsdgajdas\", \"account\": \"adminhbx\", \"userName\": \"黄玲\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"16178904673\", \"birthday\": \"\", \"sex\": 1, \"identityCard\": \"\", \"roleId\": \"1123598816738675202\", \"deptId\": \"1390923577376727042\", \"postId\": \"1123598817738675208\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"1\", \"sort\": -1, \"createTime\": \"2021-08-26 16:27:18\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1431112697168035841\", \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\", \"roleName\": \"\", \"deptName\": \"行政审批科\", \"postName\": \"\", \"sexText\": \"男\", \"userCode\": \"ceshiadmin\", \"account\": \"ceshiadmin\", \"userName\": \"测试管理员\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"15285742589\", \"birthday\": \"\", \"sex\": 1, \"identityCard\": \"\", \"roleId\": \"\", \"deptId\": \"1390923577376727042\", \"postId\": \"\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"0\", \"sort\": -1, \"createTime\": \"2021-08-27 12:33:50\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1431216878562402306\", \"password\": \"10470c3b4b1fed12c3baac014be15fac67c6e815\", \"roleName\": \"\", \"deptName\": \"行政审批科\", \"postName\": \"\", \"sexText\": \"男\", \"userCode\": \"chenli\", \"account\": \"chenli\", \"userName\": \"陈丽\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"18763540727\", \"birthday\": \"\", \"sex\": 1, \"identityCard\": \"\", \"roleId\": \"\", \"deptId\": \"1390923577376727042\", \"postId\": \"\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"1\", \"sort\": -1, \"createTime\": \"2021-08-27 19:27:49\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1432264435015131138\", \"password\": \"10470c3b4b1fed12c3baac014be15fac67c6e815\", \"roleName\": \"\", \"deptName\": \"行政审批科\", \"postName\": \"\", \"sexText\": \"男\", \"userCode\": \"testAccount090\", \"account\": \"testAccount090\", \"userName\": \"测试090\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"13546897422\", \"birthday\": \"\", \"sex\": 1, \"identityCard\": \"\", \"roleId\": \"\", \"deptId\": \"1390923577376727042\", \"postId\": \"\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"0\", \"sort\": -1, \"createTime\": \"2021-08-30 16:50:26\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1432277113678897154\", \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\", \"roleName\": \"用户,管理员\", \"deptName\": \"行政审批科\", \"postName\": \"\", \"sexText\": \"\", \"userCode\": \"test\", \"account\": \"test\", \"userName\": \"测试\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"15285472589\", \"birthday\": \"\", \"sex\": -1, \"identityCard\": \"\", \"roleId\": \"1123598816738675202,1412957403934179330\", \"deptId\": \"1390923577376727042\", \"postId\": \"\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"1\", \"sort\": -1, \"createTime\": \"2021-08-30 17:40:48\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1435180051133861889\", \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\", \"roleName\": \"用户\", \"deptName\": \"行政审批科\", \"postName\": \"\", \"sexText\": \"\", \"userCode\": \"345\", \"account\": \"345\", \"userName\": \"345\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"\", \"birthday\": \"\", \"sex\": -1, \"identityCard\": \"\", \"roleId\": \"1123598816738675202\", \"deptId\": \"1390923577376727042\", \"postId\": \"\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"0\", \"sort\": -1, \"createTime\": \"2021-09-07 17:56:03\", \"lastLoginTime\": \"\", \"passwordExpireTime\": \"\", \"isModPassword\": -1 }, { \"id\": \"1442727881393336321\", \"password\": \"041eb96ddefd5688ed8a20d7152b11aca62cf50f\", \"roleName\": \"管理员\", \"deptName\": \"行政审批科\", \"postName\": \"首席执行官\", \"sexText\": \"无\", \"userCode\": \"guoditest\", \"account\": \"guoditest\", \"userName\": \"测试管理1\", \"avatar\": \"\", \"email\": \"\", \"phone\": \"\", \"birthday\": \"\", \"sex\": -1, \"identityCard\": \"\", \"roleId\": \"1412957403934179330\", \"deptId\": \"1390923577376727042\", \"postId\": \"1123598817738675201\", \"unitId\": \"1365226728219213825\", \"status\": 1, \"sign\": \"\", \"signPwd\": \"\", \"sex\": \"0\", \"sort\": -1, \"createTime\": \"2021-09-28 13:48:26\", \"lastLoginTime\": \"2021-09-28 17:40:31\", \"passwordExpireTime\": \"2021-12-27 18:07:19\", \"isModPassword\": 1 }],\n      tableData: [],\n      //表格总数\n      total: 0,\n      //当前页面展示的条数\n      pageSizes: [10, 20, 40, 50],\n      //多选框选择的数据\n      selectionList: [],\n      //分页参数以及搜索条件\n      params: {\n        current: 1,\n        size: 10,\n      }\n    }\n  },\n  computed: {\n    //获取选中数据的id 删除的时候调用\n    ids() {\n      const ids = []\n      this.selectionList.forEach(ele => {\n        ids.push(ele.id)\n      })\n      return ids.join(',')\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      window.demos = this\n      this.initData()\n      this.getDic()\n      this.setCustomForm()\n    })\n  },\n  methods: {\n    //预加载字典数据\n    getDic() {\n      let self = this\n      this.tableColumn.map(async e => {\n        if (e.dic) {\n          const res = await entitiesOfOneType({ type: e.dic })\n          let arr = res.data.data\n          self.dictionary[e.dic] = arr.map(o => {\n            return {\n              code: o.dictKey,\n              text: o.dictValue\n            }\n          })\n        }\n      })\n    },\n    //查看和编辑 新增\n    async handleOptionDeal(type, row) {\n      this.formKey = new Date().getTime()\n      this.rows = row\n      this.type = type\n      this.showDialog = true\n      //新增\n      if (type === 'add') {\n        this.title = '新增'\n        this.rows = {}\n        await this.setCustomForm()\n        //重置新增表单\n        if (this.$refs.formCustom) {\n          this.$refs.formCustom.defaultFormVal = {}\n          this.$refs.formCustom.formVal = {}\n        }\n      } else if (type === 'view') {\n        this.title = '查看'\n        this.setCustomForm(row)\n      } else if (type === 'edit') {\n        this.title = '修改'\n        this.setCustomForm(row)\n      }\n    },\n    //当前行数据和表头数据匹配行程新的表单\n    async setCustomForm(row) {\n\n      this.setting = []\n      let obj = {}\n      //判断如果是新增则初始化所有的数据\n      //查看\n      let disable = true\n      let col = 11\n      //如果是查看 则禁止输入\n      //除了查看是禁用 其他的都可以输入\n      if (this.type == 'view') {\n        disable = true\n      } else {\n        disable = false\n      }\n      if (this.type == 'search') {\n        col = 5\n      } else {\n        col = 11\n      }\n      /*\n        // form 表单单个字段参数值\n      formObj: {\n        // 组件对应的结果code, 必填\n        key: '',\n        // 组件需要展示的label\n        label: '',\n        // 初始值,\n        default: '',\n        // 组件需要配置的布局大小，0~24, 若0则把每个组件平均分\n        col: 0,\n        // 需要传递给组件component的参数，即ele组件的属性\n        props: {},\n        // 组件的校验规则，参考el-form的检验规则\n        rules: [],\n        // 组件对应的form-item的参数\n        'form-item-props': {}\n      }\n      */\n      this.tableColumn.forEach(e => {\n        if (e.prop) {\n          obj = {\n            //key 组件对应的结果code, 必填\n            key: e.prop,\n            label: e.label,\n            //控制出来的是时间框还是输入框\n            component: e.customType,\n            col: col,\n            //这个是验证表单是否为必填 请谨慎\n            // rules: [{ required: true, message: '请输入' + e.label, trigger: 'blur' }]\n            props: {\n              disabled: disable,\n              placeholder: '请输入' + e.label\n            },\n            //label的宽度 最好是固定的 否则布局会混乱\n            'form-item-props': {\n              'label-width': 100\n            },\n            dic: e.dic\n          }\n          if (obj.component == 'select') {\n            //去除 后面四位 text\n            obj.key = obj.key.substring(0, obj.key.length - 4)\n            //设置下拉框有全部选项 如果没有则设置为 false\n            //判断类型 如果是搜索条件的话 则加上去搜索全部的选项\n            if (this.type == 'search') {\n              obj.showAll = true\n            } else {\n              obj.showAll = false\n            }\n            obj.dictionary = e.dic\n          }\n          //判断如果不是新增类型的话 都给加上默认值\n          if (this.type != 'add') {\n            for (let key in row) {\n              //查看和编辑的时候可以赋值 要取key 的值\n              if (obj.key == key) {\n                // 初始值,表单的输入框初始值  如果是下拉框 当前行的数据可能是num类型需要转换为字符串保证字典能获取到\n                if (obj.component == 'select') {\n                  obj.default = row[key] + ''\n                } else {\n                  obj.default = row[key]\n                }\n                this.setting.push(obj)\n              }\n            }\n            if (this.type == 'search') {\n              if (e.isSearch) {\n                //自定义搜索表单\n                this.searchSetting.push(obj)\n              }\n            }\n          } else {\n            //去掉操作输入框\n            if (obj.key !== 'caozuo') {\n              this.setting.push(obj)\n\n            }\n          }\n        }\n      })\n    },\n    //新增数据保存\n    submitBtn() {\n      // 编辑\n      if (this.type == 'edit') {\n        this.queryForm = this.$refs.formCustom.formVal\n        this.queryForm.id = this.rows.id\n      }\n      //编辑和新增都是同一个接口 区分唯一不同则是编辑多了个id\n      add(this.queryForm).then(res => {\n        if (res.data.code == 200) {\n          //新增或者保存成功的话调用刷新表格接口 关闭弹窗\n          this.initData()\n          this.showDialog = false\n          this.$message({\n            type: 'success',\n            message: '操作成功!'\n          })\n        } else {\n          this.$message({\n            type: 'error',\n            message: '请联系管理员!'\n          })\n        }\n      })\n    },\n    //表格选择的数据\n    selectionChange(val) {\n      this.selectionList = val\n    },\n    // 分页条件 同时请求表格\n    setpagination(page) {\n      this.params.current = page.page\n      this.params.size = page.limit\n      this.initData()\n    },\n    //获取表格数据,和搜索共用\n    initData() {\n\t  this.loading = true\n      this.params = {\n        ...this.params,\n        ...this.searchForm\n      }\n      getList(this.params).then(res => {\n        if (res.data.code == 200) {\n          //表格赋值\n          this.tableData = res.data.data.records\n          this.total = res.data.data.total\n          this.params.current = res.data.data.current\n          this.params.size = res.data.data.size\n          this.loading = false\n        } else {\n          this.loading = false\n          this.$message.error('获取当前数据报错,请联系管理员!')\n        }\n      })\n    },\n\n    //单个删除\n    rowDel(row) {\n      this.$confirm('确定将选择数据删除?', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      })\n        .then(() => {\n          return remove(row.id)\n        })\n        .then(() => {\n          //删除成功之后调用表格刷新\n          this.initData()\n          this.$message({\n            type: 'success',\n            message: '操作成功!'\n          })\n        })\n    },\n    //批量删除\n    handleDelete() {\n      if (this.selectionList.length === 0) {\n        this.$message.warning('请选择至少一条数据')\n        return\n      }\n      this.$confirm('确定将选择数据删除?', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      })\n        .then(() => {\n          //删除接口\n          return remove(this.ids)\n        })\n        .then(() => {\n          //删除成功之后调用表格刷新\n          this.initData()\n          this.$message({\n            type: 'success',\n            message: '操作成功!'\n          })\n        })\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.info-body {\n  height: 100%;\n  padding: 0 10px 10px 10px;\n  background: #fff;\n  .info-search {\n    // display: flex;\n    padding-bottom: 10px;\n    .left-search,\n    .right-btn {\n      width: 100%;\n    }\n    .right-btn {\n      display: flex;\n      justify-content: flex-end;\n    }\n  }\n  .info-table {\n    height: calc(100% - 52px);\n  }\n}\n</style>\n"
      }, {
        "name" : "template.js.vm",
        "code" : "##引入宏定义\n$!init\n$define\n#save(\"/vue\", \".js\")\n\nimport request from '@system/router/axios'\nimport Vue from 'vue'\nexport const getList = params => {\n  return request({\n    url: Vue.prototype.system + '/$tableInfo.name/page',\n    method: 'post',\n    params: params\n  })\n}\nexport const remove = ids => {\n  return request({\n    url: Vue.prototype.system + '/$tableInfo.name/removeByIds',\n    method: 'post',\n    params: {\n      ids\n    }\n  })\n}\n\nexport const add = row => {\n  return request({\n    url: Vue.prototype.system + '/$tableInfo.name/submit',\n    method: 'post',\n    data: row\n  })\n}\n\n"
      } ]
    }
  },
  "columnConfig" : {
    "gd" : {
      "name" : "gd",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : "true,false"
      } ]
    }
  },
  "globalConfig" : {
    "gd" : {
      "name" : "gd",
      "elementList" : [ {
        "name" : "init",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.toUpperCase().replaceFirst(\"ERP_\",\"\")))\n\n##是否继承BaseEntity\n#set($isInheritBaseEntity = true)\n\n##是否是字典项\n#set($isDict = false)\n\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n## 判断表字段属性是否有需要转换Text\n#foreach($column in $tableInfo.fullColumn)\n    #if($!{column.comment.length()} > 0 && $!column.comment.indexOf(\"{\") != -1 && $!column.comment.indexOf(\"}\") != -1 && $!column.comment.indexOf(\"typeCode\") != -1)\n        #set($isDict = true)\n    #end\n#end\n\n\n#foreach($column in $tableInfo.fullColumn)\n    #if($!{column.comment} && $!column.comment.indexOf(\"{\") != -1 && $!column.comment.indexOf(\"}\") != -1)\n        #set($startIndex = $!column.comment.indexOf(\"{\"))\n        #set($endIndex = $!column.comment.indexOf(\"}\") + 1)\n        #set($object_str = $!column.comment.substring($startIndex,$endIndex))\n        #if($!{object_str.length()} > 0 && $!{object_str} != \"{}\")\n            #set($jsonConfig = $tool.parseJson($object_str))\n            #if($jsonConfig.get(\"typeCode\"))\n                $tool.call($column.ext.put(\"dic\", $jsonConfig.get(\"typeCode\")))\n            #end\n            #if($jsonConfig.get(\"isShow\"))\n                $tool.call($column.ext.put(\"isShow\", $jsonConfig.get(\"isShow\")))\n            #end\n            #if($jsonConfig.get(\"isSearch\"))\n                $tool.call($column.ext.put(\"isSearch\", $jsonConfig.get(\"isSearch\")))\n            #end\n        #end\n    #end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"id\",\"createUser\",\"createTime\",\"updateUser\",\"updateTime\",\"isDeleted\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($isInheritBaseEntity)\n            #if($column.name!=$item)\n                ##带有反回值的方法调用时使用$tool.call来消除返回值\n                $tool.call($newList.add($column))\n            #end\n        #else\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)\n"
      }, {
        "name" : "define",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置表名前缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTablePrefix $prefix)\n    #set($tableName = $!tool.append($prefix, $tableInfo.name))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(saveVue $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tool.firstLowerCase($tableInfo.name), $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * @描述 $!{tableInfo.comment}$!{tableInfo.name}$desc\n * @作者 $!author\n * @日期 $!time.currTime(\"yyyy-MM-dd HH:mm\")\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end\n\n\n##定义注释截取，调用方式：#cutStr(comment)\n#macro(cutStr $comment)#if($!{comment} && ${comment.indexOf(\"{\")} != -1 && ${comment.indexOf(\"}\")} != -1)$!comment.substring(0,$!comment.indexOf(\"{\"))#else$!comment#end#end\n\n\n##定义字段前端是否显示isShow:false不显示\n#macro(showColumn $column)#if(!$!{column.comment} || $!{column.comment.indexOf(\"isShow:false\")} == -1)#if($!{column.comment} && $!{column.comment.indexOf(\"typeCode\")} != -1)#set($customType=\"select\")#elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\",\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))#set($customType=\"data-single\")#else#set($customType=\"input\")#end\n{ prop: #if($!{column.ext.dic} && $!{customType} == \"select\")'$!{column.name}Text'#else'$!{column.name}'#end, label: '#cutStr(${column.comment})', align: 'center', customType: '$!{customType}'#if($!{column.ext.dic} && $!{customType} == \"select\"), dic: '$!column.ext.dic' #end\n#if($!{column.ext.isSearch}), isSearch: '$!{column.ext.isSearch}' #end},\n#end#end"
      }, {
        "name" : "autoImport",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "mybatisSupport",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"BIGINT\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"OTHER\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end"
      }, {
        "name" : "convertDictToText",
        "value" : "##（Velocity宏定义）\n\n##实体属性字典项转换\n#macro(toEntityList $entity)#set($index = 0)#foreach($column in $tableInfo.fullColumn)#if($!{column.ext.dic})#if($index == 0)\nMap<String,String> keys = new HashMap<>();\n#end \n        keys.put(\"$!column.name\",\"$!{column.ext.dic}\");\n#set($index = $index + 1)#end#end#if($index > 0)#if($entity == \"page\")\n        redisDictService.toEntityList(pages.getRecords(),keys);\n#elseif($entity == \"list\")\n        redisDictService.toEntityList(list,keys);\n#else \n        redisDictService.toEntity($!{tool.firstLowerCase($tableInfo.name)},keys);\n#end#end#end"
      } ]
    }
  }
}